datos.ndim >> dimensiones
datos.itemsize 
matrix = np.asmatrix(array)
x_data = matriz[:,:-1]
y_data = matriz[:,-1]

**valores unicos de una columna

* forma1

import numpy as np
# todas las row de las columnas 0, 2, -1
compania = matriz[:,[0,2,-1]]

comp_array = np.array(compania)
col_unique = (sorted(set(comp_array[:,1]))) # valores unicos de la columna
col_unique

* forma2

def counts_of_all_values_rowwise(array):
    # Valores exclusivos e suas contagens de linha inteligente
    num_counts_array = [np.unique(row, return_counts=True) for row in array]
    # Contagens de todos os valores linha inteligente
    contador = ([[int(b[a==i]) if i in a else 0 for i in np.unique(array)] for a, b in num_counts_array])
    return contador


**filtrando columnas

A = [ [ind,row[0],row[-1]] for ind,row in enumerate(comp_array) if row[-1] > 0]

*otro ejemplo

a = [row for row in comp_array if row[1] != 'calculated' in comp_array]


**mascara

mask = comp_array[:7,[1]]== "cancelled" 

**filtrando con where y alguna cosita mas

b = np.where(mask,np.arange(mask.size),0)

idx = np.maximum.accumulate(np.where(mask,np.arange(mask.size),0))

*otro filtrado

np.argwhere(trial[:,[1]] == 121100)

np.count_nonzero(mask) # cuenta el numero de True

** iterando basico

for x in range(array.shape[0]): 
    for y in range(array.shape[1]):
        print(x,y)
        
** formando una matriz rapidamente

matrix = np.matrix('2 2 1; 7 7 1; 11 12 1')

** esta funcion suma el elemento derecho y el izquierdo de cada row, 
# luego recorre la matriz y suma ese elemento a cada uno de los items

def media(arr_red):
    subtracted = np.ones_like(arr_red)
    height, width = arr_red.shape
    for row_no, row in enumerate(arr_red):   # keep the row number using enumerate
        left, right = row[0], row[-1]      # you need the first and last value of the ROW!
        average = (left + right) / 2.0
        total = (left + right)
        # Also use enumerate in the inner loop
        for col_no, element in enumerate(row):
            subtracted[row_no, col_no] = element + total
    return(subtracted)        
        
**calculo de la frecuencia de cada elemento

*forma 1

import numpy as np
x = np.array([1,1,1,2,2,2,5,25,1,1])
y = np.bincount(x)
ii = np.nonzero(y)[0]
frecuencia = list(zip(ii, y[ii]))
        
#el resultado se muestra a modo de tuplas p.e del elemento 1 tenemos 5, del 2 tenemos 3 

*forma 2

x = np.array(arr[:,[1]])
unique, counts = np.unique(x, return_counts = True)
print(np.asarray((unique, counts)).T)
        
*forma3

def unique(a):
    unique, counts = np.unique(a, return_counts=True)
    return np.asarray((unique, counts)).T

def unique_count(a):
    
    unique, inverse = np.unique(a, return_inverse=True)
    count = np.zeros(len(unique), np.int)
    np.add.at(count, inverse, 1)
    result.append(np.vstack((unique, count)).T)
    return result
        
*distancia entre dos puntos

import math
def distance(xs, ys):
    n = len(xs)
    
    for i in range(n):
        a = xs+ys
    return a
        
*calculopercentil de una columna

print(np.percentile(compania[:,-1], 90))
        
        
*ordenar valores de una array

arr = np.array([1, 3, 2, 4, 5])
ordeno = arr.argsort()[-3:][::-1]
ordeno
        
* guardar archivos con formato html, ver merchant_accept_rate_numpy

def tabla_html(lista_to_pivot_table):
    json_replace = {}
    for n, item in enumerate(['1','2','3','4']):
        json_result[item] = [(i) for i in lista_to_pivot_table[n]]
    for n, item in enumerate(['html1','html2','html4','html4']):     
        json_result[item] = to_html([(i) for i in lista_to_pivot_table[n]])

    return (json_result)
    
* cargar csv
csv = np.genfromtxt ('tabla_reports.csv', delimiter=",",skip_header=0)
        
        
** indices correspondientes a los mayores valores

*forma1

import heapq
a = np.array([25,2,9,5,1,7,40])
heapq.nlargest(3, range(len(a)), a.take)

*forma2

ind = np.argpartition(a, -4)[-4:]

*forma3

idx = (-a).argsort()[:]

*forma 4 >> funcion para obtener los indices de aquellos elementos mayores

def largest_indices(arry, n):
    """Returns the n largest indices from a numpy array."""
    flat = arry.flatten()
    indices = np.argpartition(flat, -n)[-n:]
    indices = indices[np.argsort(-flat[indices])]
    return np.unravel_index(indices, arry.shape)

largest_indices(a, n=len(a)) # obtengo los indices

a[largest_indices(a,n=len(a))] # obtengo los valores ordenados

*forma 5

K = 4 # We want the indices of the four largest values
a = np.array([0, 8, 0, 4, 5, 8, 8, 0, 4, 2])
resultado = np.argpartition(a,-K)[-K:]

*cuando tenemos una multidimensional

arr = np.array([[2,45,7],[39,45,2]])
N = len(arr)
indices = np.argpartition(arr, 1, axis=1)[:, :]

*forma 7

A = [2,45,7,39,50,2]
from operator import itemgetter
from heapq import nlargest
result = nlargest(len(A), enumerate(A), itemgetter(1))

* forma 8 >> con funcion

def max_indices(arr, k):
    '''
    Returns the indices of the k first largest elements of arr
    (in descending order in values)
    '''
    assert k <= arr.size, 'k should be smaller or equal to the array size'
    arr_ = arr.astype(float)  # make a copy of arr
    max_idxs = []
    for _ in range(k):
        max_element = np.max(arr_)
        if np.isinf(max_element):
            break
        else:
            idx = np.where(arr_ == max_element)
        max_idxs.append(idx)
        arr_[idx] = -np.inf
    return max_idxs

arr[max_indices(arr, 4)[0]][0] # retorna el mayor valor total 

**insertar valores en una matriz

* forma1

b = np.insert(array, 1, values=0, axis=1) # 1 indeca la posicion donde queremos

*forma2

source = array.tolist()
result = [row + ['total'] for row in source]
b = np.array(result)

*como modificar un valor

np.asarray(A)[:,[3]]='REBECA'

* encontrar valores unicos

new_array = [tuple(row) for row in array[:,[2]]]
uniques = np.unique(new_array)

*lambda, map basico

x = np.array([[1,3,6,88,9]])
y = []
for v in x:
    y = [v*5]
y = [v*5 for v in x]
y = list(map(lambda v : v -2, x))
y = map(lambda v : v * 5, filter(lambda u : u % 2, x))
x = [2, 3, 4]
y = [4, 5]
t = map(lambda v : map(lambda w : v + w, y), x)
t == [[6, 7], [7, 8], [8, 9]]

* algunas cositas conlistas

list1 = []
list2 = []
list3 = []
def datos_out(lista):
    for i in lista:
        list1.append(i[1:][:])
        datos = list1[1:]
        fechas = list2.append (i[0][:])
        fechas = list2[1:]
     
    return(datos,fechas) 

*en una funcion

def datos_out (array):
    list1 = []
    list2 = []
    list3 = []
    for i in resultado:
        list1.append(i[1:][:])
        datos = np.array(list1[1:]).transpose()
        f = list2.append (i[0][:])
        fechas = ', '.join(list2[1:])   
        data1 = datos[0].tolist()
        data2 = datos[1].tolist()
        data3 = datos[2].tolist()
    return(fechas,data1) 
    
* lo paso a dictionario

dic = []
key = fechas
value = datos
labels=[]
for value in datos:
   
    dic.append({
        'label': key,
        'data': value,
       
    })

a = str(dic)

* agrupo mediente dict

from collections import defaultdict
group_by_datestatus= []
d = defaultdict(list)
lista_tuplas = []
lista_amount = []
for row in a:
    d[row[2],row[0]].append(row[1]) # necesito que lo haga agrupado por fechas
 
for k, v in sorted(d.items()):
    group_by_datestatus.append([k, v])

for row in group_by_datestatus:
       print(row)
       lista_tuplas.append(row[0])
       lista_amount.append(row[1])

* funcion retorno(a revisar)

def promedio(lista):
    for i in range(len(lista[0])):
        columna = [fila[i] for fila in lista]
        print(columna)

* promedio valores deuna lista

def promedio(lista):
    for i in range(len(lista[:1])):
        columna = [fila[i] for fila in lista]
        for i in range(len(lista[1])):
            fila = [columna[i] for columna in lista]
        print(columna, fila)

* matriz(revisar)

matriz = [[data[i][j][5:]+data[i][j][:3] for j in range(3)] for i in range(2)]

*quitar los brackets de una str

def listToStringWithoutBrackets(a):
    return str(a).replace('[',' ').replace(']',' ')

listToStringWithoutBrackets(a).replace('"',' ').replace(']',' ')

* aplicando condiciones

condition = (iris_2d[:, 2] > 1.5) & (iris_2d[:, 0] < 5.0)


######

** convierto en diccionario una lista dejando el indice como una key

li = codigos.tolist()
import collections 
 
{ i : li[i] for i in range(0,len(li)) for j in range(0,len(a[i]))}


** devuelve el indice del mayor valor, si hay valores max repetidos, todos 
los indices

multi_max = [15,0,0,15,0,0,15,4]
uniques, idx = np.unique(multi_max, return_inverse=True)
print (np.squeeze(np.argwhere(idx == np.argmax(uniques))))

** devuelve el indice del array de los datos que han sido encontrados.

def asvoid(arr):
   
    arr = np.ascontiguousarray(arr)
    if np.issubdtype(arr.dtype, np.floating):
        arr += 0.
    return arr.view(np.dtype((np.void, arr.dtype.itemsize * arr.shape[-1])))

idx = np.flatnonzero(np.in1d(asvoid(X), asvoid(searched_values)))
print(idx)

* otra forma de buscar valores
X = np.array([[4,  2],
              [9,  3],
              [8,  5],
              ['a',  3],
              [5,  6]])

S = np.array([['a', 3],
              ['b', 5],
              [5, 6]])

result = [[i for i,row in enumerate(X) if (s==row).all()] for s in S]


* ejemplo de formacion de una matriz a partir de una lista con la forma deseada.>> broadcasting

def broadcasting_app(a, L, S ):  # Window len = L, Stride len/stepsize = S
    nrows = ((a.size-L)//S)+1
    return a[S*np.arange(nrows)[:,None] + np.arange(L)]

* extraer indice de una lista
i = a.tolist().index(3)

* formas en x e y
x_size = array.shape[0]
y_size = array.shape[1]

** a partir de dos matrices(A>> valores, B>>seria el orden, ) conseguimos una matriz con el nuevo orden

outlist = []
outlist2 = []
for i in range(len(B)):
    #print('row de B',i) # los indeces de B
    lst = []
    lst2 = []
    for j in range(len(B[i])):
        #print('columns de B')
        #print(j)
        lst.append(A[i][B[i][j]])
        #lst2.append(A[i][B[j]])
    outlist.append(lst)
    #outlist2.append(lst2)
    
outarray = np.asarray(outlist)
outarray2 = np.asarray(outlist2)
print(outarray)







